# coding: utf-8
"""Waylay rules engine query parameters.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from typing import Any, List

from pydantic import (
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
)
from typing_extensions import (
    Annotated,  # >=3.11
)
from waylay.sdk.api._models import BaseModel as WaylayBaseModel

from ..models.list_tasks_format_parameter import ListTasksFormatParameter
from ..models.task_scenario_type import TaskScenarioType
from ..models.task_status import TaskStatus


def _create_query_alias_for(field_name: str) -> str:
    if field_name == "fail_on_warning":
        return "failOnWarning"
    if field_name == "return_warnings":
        return "returnWarnings"
    return field_name


class CreateQuery(WaylayBaseModel):
    """Model for `create` query parameters."""

    fail_on_warning: Annotated[
        StrictBool | None,
        Field(
            description="If `true` and there are task warnings, the response will be a `400 Validation failed`"
        ),
    ] = None
    return_warnings: Annotated[
        StrictBool | None,
        Field(
            description="If `true`, result body will contain a list of task warnings that where detected"
        ),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_create_query_alias_for,
        populate_by_name=True,
    )


def _delete_query_alias_for(field_name: str) -> str:
    return field_name


class DeleteQuery(WaylayBaseModel):
    """Model for `delete` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_delete_query_alias_for,
        populate_by_name=True,
    )


def _get_configuration_query_alias_for(field_name: str) -> str:
    if field_name == "format":
        return "format"
    return field_name


class GetConfigurationQuery(WaylayBaseModel):
    """Model for `get_configuration` query parameters."""

    format: Annotated[
        ListTasksFormatParameter | None,
        Field(description="Format of the graph definition"),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_configuration_query_alias_for,
        populate_by_name=True,
    )


def _get_query_alias_for(field_name: str) -> str:
    if field_name == "format":
        return "format"
    return field_name


class GetQuery(WaylayBaseModel):
    """Model for `get` query parameters."""

    format: Annotated[
        ListTasksFormatParameter | None,
        Field(description="Format of the graph definition"),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "hits":
        return "hits"
    if field_name == "start_index":
        return "startIndex"
    if field_name == "format":
        return "format"
    if field_name == "name":
        return "name"
    if field_name == "resource":
        return "resource"
    if field_name == "resource_type":
        return "resourceType"
    if field_name == "type":
        return "type"
    if field_name == "status":
        return "status"
    if field_name == "ids":
        return "ids"
    if field_name == "id":
        return "id"
    if field_name == "plugin":
        return "plugin"
    if field_name == "template":
        return "template"
    if field_name == "filter":
        return "filter"
    if field_name == "tags_key":
        return "tags.key"
    if field_name == "finished_before":
        return "finishedBefore"
    if field_name == "created_after":
        return "createdAfter"
    if field_name == "created_before":
        return "createdBefore"
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    hits: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None
    start_index: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    format: Annotated[
        ListTasksFormatParameter | None,
        Field(description="Format of the graph definition"),
    ] = None
    name: StrictStr | None = None
    resource: StrictStr | None = None
    resource_type: StrictStr | None = None
    type: TaskScenarioType | None = None
    status: TaskStatus | None = None
    ids: List[StrictStr] | None = None
    id: StrictStr | None = None
    plugin: StrictStr | None = None
    template: StrictStr | None = None
    filter: Annotated[
        StrictStr | None, Field(description="fuzzy search on multiple properties")
    ] = None
    tags_key: Annotated[
        Any | None,
        Field(
            description="Parameter is `form` style serialized, with explode: true  See [Query multiple tasks tag examples](/#/api/rules/?id=queryTagExamples)  You can add the same tag query parameter multiple times with different values, which will be applied with a logical OR.  You can specify the `tags.<key>` query parameter without a value, tasks which have a value for tag `<key>` will be returned"
        ),
    ] = None
    finished_before: Annotated[
        StrictInt | None,
        Field(description="Tasks stopped before provided time will be returned."),
    ] = None
    created_after: Annotated[
        StrictInt | None,
        Field(description="Tasks created after provided time will be returned."),
    ] = None
    created_before: Annotated[
        StrictInt | None,
        Field(description="Tasks created before provided time will be returned"),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )


def _replace_query_alias_for(field_name: str) -> str:
    return field_name


class ReplaceQuery(WaylayBaseModel):
    """Model for `replace` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_replace_query_alias_for,
        populate_by_name=True,
    )


def _start_query_alias_for(field_name: str) -> str:
    return field_name


class StartQuery(WaylayBaseModel):
    """Model for `start` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_start_query_alias_for,
        populate_by_name=True,
    )


def _stop_query_alias_for(field_name: str) -> str:
    return field_name


class StopQuery(WaylayBaseModel):
    """Model for `stop` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_stop_query_alias_for,
        populate_by_name=True,
    )
