# coding: utf-8
"""Waylay rules engine query parameters.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations  # for Python 3.7â€“3.9

from typing import List

from pydantic import (
    ConfigDict,
    Field,
    StrictInt,
    StrictStr,
)
from typing_extensions import (
    Annotated,  # >=3.11
)
from waylay.sdk.api._models import BaseModel as WaylayBaseModel

from ..models.list_tasks_format_parameter import ListTasksFormatParameter


def _create_query_alias_for(field_name: str) -> str:
    return field_name


class CreateQuery(WaylayBaseModel):
    """Model for `create` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_create_query_alias_for,
        populate_by_name=True,
    )


def _delete_query_alias_for(field_name: str) -> str:
    return field_name


class DeleteQuery(WaylayBaseModel):
    """Model for `delete` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_delete_query_alias_for,
        populate_by_name=True,
    )


def _get_discovery_query_alias_for(field_name: str) -> str:
    return field_name


class GetDiscoveryQuery(WaylayBaseModel):
    """Model for `get_discovery` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_discovery_query_alias_for,
        populate_by_name=True,
    )


def _get_query_alias_for(field_name: str) -> str:
    if field_name == "format":
        return "format"
    return field_name


class GetQuery(WaylayBaseModel):
    """Model for `get` query parameters."""

    format: Annotated[
        ListTasksFormatParameter | None,
        Field(description="Format of the graph definition"),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_get_query_alias_for,
        populate_by_name=True,
    )


def _list_query_alias_for(field_name: str) -> str:
    if field_name == "hits":
        return "hits"
    if field_name == "start_index":
        return "startIndex"
    if field_name == "filter":
        return "filter"
    if field_name == "ids":
        return "ids"
    if field_name == "id":
        return "id"
    if field_name == "plugin":
        return "plugin"
    if field_name == "tags_x":
        return "tags.X"
    return field_name


class ListQuery(WaylayBaseModel):
    """Model for `list` query parameters."""

    hits: Annotated[
        StrictInt | None, Field(description="(Paging) maximal number of items returned")
    ] = None
    start_index: Annotated[
        StrictInt | None, Field(description="(Paging) items to skip in the listing")
    ] = None
    filter: Annotated[
        StrictStr | None, Field(description="fuzzy search on multiple properties")
    ] = None
    ids: Annotated[
        List[StrictStr] | None,
        Field(description="comma separated string of template names"),
    ] = None
    id: Annotated[StrictStr | None, Field(description="filter on template name")] = None
    plugin: Annotated[
        StrictStr | None,
        Field(
            description="either name of a plugin (e.g. `mySensor`), or full version specification of the plug (e.g `mySensor:1.0.3`)"
        ),
    ] = None
    tags_x: StrictStr | None = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_list_query_alias_for,
        populate_by_name=True,
    )


def _replace_query_alias_for(field_name: str) -> str:
    return field_name


class ReplaceQuery(WaylayBaseModel):
    """Model for `replace` query parameters."""

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_replace_query_alias_for,
        populate_by_name=True,
    )


def _set_query_alias_for(field_name: str) -> str:
    if field_name == "name":
        return "name"
    return field_name


class SetQuery(WaylayBaseModel):
    """Model for `set` query parameters."""

    name: Annotated[
        StrictStr | None,
        Field(
            description="The template to set as discovery template. If you do not specify this parameter, the current discovery template will be cleared."
        ),
    ] = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_set_query_alias_for,
        populate_by_name=True,
    )


def _upgrade_plugins_query_alias_for(field_name: str) -> str:
    if field_name == "ids":
        return "ids"
    if field_name == "id":
        return "id"
    if field_name == "plugin":
        return "plugin"
    if field_name == "tags_x":
        return "tags.X"
    return field_name


class UpgradePluginsQuery(WaylayBaseModel):
    """Model for `upgrade_plugins` query parameters."""

    ids: Annotated[
        List[StrictStr] | None,
        Field(description="comma separated string of template names"),
    ] = None
    id: Annotated[StrictStr | None, Field(description="filter on template name")] = None
    plugin: Annotated[
        StrictStr | None,
        Field(
            description="either name of a plugin (e.g. `mySensor`), or full version specification of the plug (e.g `mySensor:1.0.3`)"
        ),
    ] = None
    tags_x: StrictStr | None = None

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
        extra="allow",
        alias_generator=_upgrade_plugins_query_alias_for,
        populate_by_name=True,
    )
