# coding: utf-8
"""Waylay rules engine api tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import re
from importlib.util import find_spec
from typing import Union
from urllib.parse import quote

import pytest
from pytest_httpx import HTTPXMock
from typeguard import check_type
from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.rules.api import TemplateRunsApi
from waylay.services.rules.service import RulesService

from ..types.template_run_invocation_stub import TemplateRunInvocationStub

MODELS_AVAILABLE = (
    True if find_spec("waylay.services.rules.models") is not None else False
)

if MODELS_AVAILABLE:
    from waylay.services.rules.models import (
        TemplateRunInvocation,
    )
    from waylay.services.rules.queries.template_runs_api import RunGraphQuery, RunQuery


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def template_runs_api(waylay_api_client: ApiClient) -> TemplateRunsApi:
    return TemplateRunsApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that TemplateRunsApi api is registered in the sdk client."""
    assert isinstance(waylay_client.rules.template_runs, TemplateRunsApi)


def _run_graph_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = TemplateRunInvocationStub.create_json()
    httpx_mock_kwargs = {
        "method": "POST",
        "url": re.compile(f"^{gateway_url}/rules/v1/templates/run(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_run_graph(
    service: RulesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for run_graph
    Run Graph Or Bayesian Network
    """
    # set path params
    kwargs = {
        # optionally use RunGraphQuery to validate and reuse parameters
        "query": RunGraphQuery(
            log_level="DEBUG",
            target_node=[],
        ),
    }
    _run_graph_set_mock_response(httpx_mock, gateway_url)
    resp = await service.template_runs.run_graph(**kwargs)
    check_type(resp, Union[TemplateRunInvocation,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_run_graph_without_types(
    service: RulesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for run_graph with models not installed
    Run Graph Or Bayesian Network
    """
    # set path params
    kwargs = {
        "query": {
            "logLevel": "DEBUG",
            "targetNode": [],
        },
    }
    _run_graph_set_mock_response(httpx_mock, gateway_url)
    resp = await service.template_runs.run_graph(**kwargs)
    check_type(resp, Model)


def _run_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str, name: str):
    mock_response = TemplateRunInvocationStub.create_json()
    httpx_mock_kwargs = {
        "method": "POST",
        "url": re.compile(f"^{gateway_url}/rules/v1/templates/{name}/run(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_run(service: RulesService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for run
    Run Template
    """
    # set path params
    name = "name_example"

    kwargs = {
        # optionally use RunQuery to validate and reuse parameters
        "query": RunQuery(
            log_level="DEBUG",
            target_node=[],
        ),
    }
    _run_set_mock_response(httpx_mock, gateway_url, quote(str(name)))
    resp = await service.template_runs.run(name, **kwargs)
    check_type(resp, Union[TemplateRunInvocation,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_run_without_types(
    service: RulesService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for run with models not installed
    Run Template
    """
    # set path params
    name = "name_example"

    kwargs = {
        "query": {
            "logLevel": "DEBUG",
            "targetNode": [],
        },
    }
    _run_set_mock_response(httpx_mock, gateway_url, quote(str(name)))
    resp = await service.template_runs.run(name, **kwargs)
    check_type(resp, Model)
