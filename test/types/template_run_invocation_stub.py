# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.template_run_invocation import (
        TemplateRunInvocation,
    )

    TemplateRunInvocationAdapter = TypeAdapter(TemplateRunInvocation)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

template_run_invocation_model_schema = json.loads(
    r"""{
  "required" : [ "actuators", "invocationId", "log", "sensors", "taskId" ],
  "type" : "object",
  "properties" : {
    "taskId" : {
      "$ref" : "#/components/schemas/TaskId"
    },
    "invocationId" : {
      "$ref" : "#/components/schemas/InvocationId"
    },
    "sensors" : {
      "title" : "Sensors Results",
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/components/schemas/TemplateRunSensorResult"
      },
      "description" : "The execution result for each of the sensors of the template",
      "example" : {
        "alarm" : {
          "executed" : true,
          "result" : true,
          "state" : "OK",
          "rawData" : { },
          "log" : [ ]
        },
        "streamingDataSensor" : {
          "executed" : true,
          "result" : true,
          "state" : "ABOVE",
          "rawData" : {
            "parameter" : "temperature",
            "threshold" : 20
          }
        }
      }
    },
    "actuators" : {
      "title" : "Actuator Results",
      "type" : "object",
      "additionalProperties" : {
        "$ref" : "#/components/schemas/TemplateRunActuatorResult"
      },
      "description" : "The execution result for each of the actuators of the template",
      "example" : {
        "send_sms" : {
          "executed" : true,
          "result" : true,
          "log" : [ ]
        }
      }
    },
    "log" : {
      "title" : "Logs",
      "type" : "array",
      "items" : {
        "$ref" : "#/components/schemas/Logs_inner"
      }
    }
  }
}
""",
    object_hook=with_example_provider,
)
template_run_invocation_model_schema.update({"definitions": MODEL_DEFINITIONS})

template_run_invocation_faker = JSF(
    template_run_invocation_model_schema, allow_none_optionals=1
)


class TemplateRunInvocationStub:
    """TemplateRunInvocation unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return template_run_invocation_faker.generate()

    @classmethod
    def create_instance(cls) -> "TemplateRunInvocation":
        """Create TemplateRunInvocation stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return TemplateRunInvocationAdapter.validate_python(cls.create_json())
