# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.relation_node import RelationNode

    RelationNodeAdapter = TypeAdapter(RelationNode)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

relation_node_model_schema = json.loads(
    r"""{
  "title" : "RelationNode",
  "required" : [ "combinations", "label", "parentLabels", "type" ],
  "type" : "object",
  "properties" : {
    "label" : {
      "title" : "label",
      "example" : "AND_1",
      "allOf" : [ {
        "$ref" : "#/components/schemas/NodeId"
      } ]
    },
    "type" : {
      "$ref" : "#/components/schemas/GateType"
    },
    "parentLabels" : {
      "title" : "Labels of the sensors that are attached to this gate",
      "type" : "array",
      "example" : [ "dice_1", "dice_2" ],
      "items" : {
        "$ref" : "#/components/schemas/NodeId"
      }
    },
    "combinations" : {
      "title" : "Combinations of connected sensor's states",
      "type" : "array",
      "items" : {
        "type" : "array",
        "example" : [ "ONE", "TWO" ],
        "items" : {
          "type" : "string",
          "description" : "State of one of the connected sensors"
        }
      }
    },
    "position" : {
      "$ref" : "#/components/schemas/Position"
    }
  },
  "additionalProperties" : false,
  "description" : "Representation of a gate in a Rule Template."
}
""",
    object_hook=with_example_provider,
)
relation_node_model_schema.update({"definitions": MODEL_DEFINITIONS})

relation_node_faker = JSF(relation_node_model_schema, allow_none_optionals=1)


class RelationNodeStub:
    """RelationNode unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return relation_node_faker.generate()

    @classmethod
    def create_instance(cls) -> "RelationNode":
        """Create RelationNode stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return RelationNodeAdapter.validate_python(cls.create_json())
