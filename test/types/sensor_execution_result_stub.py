# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.sensor_execution_result import (
        SensorExecutionResult,
    )

    SensorExecutionResultAdapter = TypeAdapter(SensorExecutionResult)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

sensor_execution_result_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "result" : {
      "type" : "boolean",
      "description" : "flag indicating if the sensor was successfully executed"
    },
    "state" : {
      "type" : "string",
      "description" : "observedState field returned by the sensor execution"
    },
    "error" : {
      "type" : "string",
      "description" : "error message in case of failure"
    },
    "rawData" : {
      "type" : "object",
      "description" : "the rawData returned by the sensor execution"
    },
    "log" : {
      "type" : "array",
      "items" : {
        "type" : "object"
      }
    }
  }
}
""",
    object_hook=with_example_provider,
)
sensor_execution_result_model_schema.update({"definitions": MODEL_DEFINITIONS})

sensor_execution_result_faker = JSF(
    sensor_execution_result_model_schema, allow_none_optionals=1
)


class SensorExecutionResultStub:
    """SensorExecutionResult unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return sensor_execution_result_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "SensorExecutionResult":
        """Create SensorExecutionResult stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                SensorExecutionResultAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return SensorExecutionResultAdapter.validate_python(
            json, context={"skip_validation": True}
        )
