# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.property_updates_spec import PropertyUpdatesSpec

    PropertyUpdatesSpecAdapter = TypeAdapter(PropertyUpdatesSpec)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

property_updates_spec_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "variables" : {
      "type" : "object",
      "description" : "Set of variables to update.\nWill be merged with the current variables.\nTo delete any of the current variables (and fall back to the default value from the template) set the value to `null`"
    },
    "tags" : {
      "type" : "object",
      "description" : "Key-value pairs.\nWill be merged with the current tags.\nTo delete any of the current tags set the value to `null`"
    }
  },
  "nullable" : true,
  "anyOf" : [ ]
}
""",
    object_hook=with_example_provider,
)
property_updates_spec_model_schema.update({"definitions": MODEL_DEFINITIONS})

property_updates_spec_faker = JSF(
    property_updates_spec_model_schema, allow_none_optionals=1
)


class PropertyUpdatesSpecStub:
    """PropertyUpdatesSpec unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return property_updates_spec_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "PropertyUpdatesSpec":
        """Create PropertyUpdatesSpec stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                PropertyUpdatesSpecAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return PropertyUpdatesSpecAdapter.validate_python(
            json, context={"skip_validation": True}
        )
