# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.batch_query import BatchQuery

    BatchQueryAdapter = TypeAdapter(BatchQuery)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

batch_query_model_schema = json.loads(
    r"""{
  "type" : "object",
  "properties" : {
    "name" : {
      "$ref" : "#/components/schemas/TaskName"
    },
    "resource" : {
      "$ref" : "#/components/schemas/ResourceId"
    },
    "type" : {
      "$ref" : "#/components/schemas/TaskScenarioType"
    },
    "status" : {
      "$ref" : "#/components/schemas/TaskStatus"
    },
    "template" : {
      "$ref" : "#/components/schemas/TemplateId"
    },
    "plugin" : {
      "type" : "string",
      "description" : "either name of a plugin (e.g. `mySensor`), or full version specification of the plug (e.g `mySensor:1.0.3`)",
      "example" : "mySensor:1.0.3"
    },
    "user" : {
      "$ref" : "#/components/schemas/TaskUser"
    },
    "finishedBefore" : {
      "$ref" : "#/components/schemas/UnixEpochMillis"
    },
    "createdAfter" : {
      "$ref" : "#/components/schemas/UnixEpochMillis"
    },
    "createdBefore" : {
      "$ref" : "#/components/schemas/UnixEpochMillis"
    },
    "tags" : {
      "$ref" : "#/components/schemas/TagsTaskObject"
    }
  }
}
""",
    object_hook=with_example_provider,
)
batch_query_model_schema.update({"definitions": MODEL_DEFINITIONS})

batch_query_faker = JSF(batch_query_model_schema, allow_none_optionals=1)


class BatchQueryStub:
    """BatchQuery unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return batch_query_faker.generate()

    @classmethod
    def create_instance(cls) -> "BatchQuery":
        """Create BatchQuery stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return BatchQueryAdapter.validate_python(cls.create_json())
