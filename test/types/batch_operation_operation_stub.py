# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.batch_operation_operation import (
        BatchOperationOperation,
    )

    BatchOperationOperationAdapter = TypeAdapter(BatchOperationOperation)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

batch_operation_operation_model_schema = json.loads(
    r"""{
  "title" : "BatchOperation_operation",
  "required" : [ "action", "description", "entity" ],
  "type" : "object",
  "properties" : {
    "entity" : {
      "$ref" : "#/components/schemas/BatchTask_entity"
    },
    "action" : {
      "$ref" : "#/components/schemas/BatchOperation_operation_action"
    },
    "description" : {
      "title" : "description",
      "type" : "string",
      "description" : "description of the operations",
      "example" : "Remove tasks filtered by ids=808aec38-3fb3-4163-a45e-1890e94081ea"
    }
  },
  "description" : "Summary of the batch operation"
}
""",
    object_hook=with_example_provider,
)
batch_operation_operation_model_schema.update({"definitions": MODEL_DEFINITIONS})

batch_operation_operation_faker = JSF(
    batch_operation_operation_model_schema, allow_none_optionals=1
)


class BatchOperationOperationStub:
    """BatchOperationOperation unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return batch_operation_operation_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "BatchOperationOperation":
        """Create BatchOperationOperation stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                BatchOperationOperationAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return BatchOperationOperationAdapter.validate_python(
            json, context={"skip_validation": True}
        )
