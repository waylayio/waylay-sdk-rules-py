# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.trigger_state_change import TriggerStateChange

    TriggerStateChangeAdapter = TypeAdapter(TriggerStateChange)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

trigger_state_change_model_schema = json.loads(
    r"""{
  "required" : [ "stateFrom", "stateTo" ],
  "type" : "object",
  "properties" : {
    "stateFrom" : {
      "title" : "State from which to trigger, or '*'",
      "type" : "string"
    },
    "stateTo" : {
      "title" : "State to, or '*'",
      "type" : "string"
    }
  },
  "description" : "State change specification under which to trigger the next node."
}
""",
    object_hook=with_example_provider,
)
trigger_state_change_model_schema.update({"definitions": MODEL_DEFINITIONS})

trigger_state_change_faker = JSF(
    trigger_state_change_model_schema, allow_none_optionals=1
)


class TriggerStateChangeStub:
    """TriggerStateChange unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return trigger_state_change_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "TriggerStateChange":
        """Create TriggerStateChange stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                TriggerStateChangeAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return TriggerStateChangeAdapter.validate_python(
            json, context={"skip_validation": True}
        )
