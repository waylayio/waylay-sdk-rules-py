# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.task_defaults_element import TaskDefaultsElement

    TaskDefaultsElementAdapter = TypeAdapter(TaskDefaultsElement)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

task_defaults_element_model_schema = json.loads(
    r"""{
  "title" : "TaskDefaultsElement",
  "type" : "object",
  "properties" : {
    "tags" : {
      "$ref" : "#/components/schemas/TagsTaskObject"
    },
    "type" : {
      "$ref" : "#/components/schemas/TaskScenarioType"
    },
    "resetObservations" : {
      "type" : "boolean"
    },
    "parallel" : {
      "type" : "boolean"
    },
    "gatesNeedFullObservation" : {
      "type" : "boolean"
    },
    "cron" : {
      "$ref" : "#/components/schemas/CronExpression"
    },
    "rrule" : {
      "$ref" : "#/components/schemas/RRuleExpression"
    },
    "timeZone" : {
      "$ref" : "#/components/schemas/TimeZoneId"
    },
    "frequency" : {
      "type" : "integer",
      "description" : "polling frequency in milliseconds"
    }
  },
  "description" : "default task settings that will be applied when creating a task from the template",
  "example" : {
    "type" : "periodic",
    "frequency" : 900000,
    "resetObservations" : false
  }
}
""",
    object_hook=with_example_provider,
)
task_defaults_element_model_schema.update({"definitions": MODEL_DEFINITIONS})

task_defaults_element_faker = JSF(
    task_defaults_element_model_schema, allow_none_optionals=1
)


class TaskDefaultsElementStub:
    """TaskDefaultsElement unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return task_defaults_element_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "TaskDefaultsElement":
        """Create TaskDefaultsElement stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                TaskDefaultsElementAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return TaskDefaultsElementAdapter.validate_python(
            json, context={"skip_validation": True}
        )
