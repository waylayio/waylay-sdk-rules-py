# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.task_runtime_information import (
        TaskRuntimeInformation,
    )

    TaskRuntimeInformationAdapter = TypeAdapter(TaskRuntimeInformation)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

task_runtime_information_model_schema = json.loads(
    r"""{
  "type" : "object",
  "allOf" : [ {
    "$ref" : "#/components/schemas/TaskDefaultsElement"
  }, {
    "properties" : {
      "finishedTime" : {
        "$ref" : "#/components/schemas/UnixEpochMillis"
      },
      "invocationCount" : {
        "type" : "integer",
        "description" : "Number of times the task has been invoked",
        "format" : "int64"
      },
      "rawData" : {
        "$ref" : "#/components/schemas/TaskRuntimeInformation_allOf_rawData"
      },
      "lastExecutionTime" : {
        "$ref" : "#/components/schemas/UnixEpochMillis"
      },
      "health" : {
        "$ref" : "#/components/schemas/TaskRuntimeInformation_allOf_health"
      }
    }
  } ]
}
""",
    object_hook=with_example_provider,
)
task_runtime_information_model_schema.update({"definitions": MODEL_DEFINITIONS})

task_runtime_information_faker = JSF(
    task_runtime_information_model_schema, allow_none_optionals=1
)


class TaskRuntimeInformationStub:
    """TaskRuntimeInformation unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return task_runtime_information_faker.generate(
            use_defaults=True, use_examples=True
        )

    @classmethod
    def create_instance(cls) -> "TaskRuntimeInformation":
        """Create TaskRuntimeInformation stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                TaskRuntimeInformationAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return TaskRuntimeInformationAdapter.validate_python(
            json, context={"skip_validation": True}
        )
