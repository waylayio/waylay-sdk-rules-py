# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.actuator_node import ActuatorNode

    ActuatorNodeAdapter = TypeAdapter(ActuatorNode)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

actuator_node_model_schema = json.loads(
    r"""{
  "title" : "ActuatorNode",
  "required" : [ "label", "name", "version" ],
  "type" : "object",
  "properties" : {
    "label" : {
      "$ref" : "#/components/schemas/NodeId"
    },
    "name" : {
      "title" : "Name of actuator",
      "type" : "string"
    },
    "version" : {
      "$ref" : "#/components/schemas/Version"
    },
    "properties" : {
      "title" : "Key-value object of required properties",
      "type" : "object"
    },
    "sequence" : {
      "title" : "Sequence",
      "type" : "integer"
    },
    "position" : {
      "$ref" : "#/components/schemas/Position"
    },
    "timeout" : {
      "title" : "Time (in ISO 8601 duration format) before the plugin times out, defaults to PT50S (50 seconds)",
      "type" : "string",
      "default" : "PT50S"
    }
  },
  "additionalProperties" : false,
  "description" : "Representation of an actuator in a Rule Template.",
  "example" : {
    "label" : "debugDialog_1",
    "name" : "debugDialog",
    "version" : "1.0.0",
    "properties" : {
      "message" : "Dice 1 has value ONE"
    },
    "position" : [ 827, 323 ]
  }
}
""",
    object_hook=with_example_provider,
)
actuator_node_model_schema.update({"definitions": MODEL_DEFINITIONS})

actuator_node_faker = JSF(actuator_node_model_schema, allow_none_optionals=1)


class ActuatorNodeStub:
    """ActuatorNode unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return actuator_node_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "ActuatorNode":
        """Create ActuatorNode stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                ActuatorNodeAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return ActuatorNodeAdapter.validate_python(
            json, context={"skip_validation": True}
        )
