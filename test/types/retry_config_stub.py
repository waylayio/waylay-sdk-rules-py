# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.retry_config import RetryConfig

    RetryConfigAdapter = TypeAdapter(RetryConfig)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

retry_config_model_schema = json.loads(
    r"""{
  "required" : [ "maxBackoff", "maxRetries", "minBackoff" ],
  "type" : "object",
  "properties" : {
    "maxRetries" : {
      "minimum" : 0,
      "type" : "integer",
      "example" : 3
    },
    "minBackoff" : {
      "type" : "string",
      "format" : "duration",
      "example" : "PT1S"
    },
    "maxBackoff" : {
      "type" : "string",
      "format" : "duration",
      "example" : "PT10S"
    },
    "errorState" : {
      "type" : "string",
      "description" : "Optional sensor state which will be used to set the state of the node when the maxRetries is reached.",
      "format" : "string",
      "example" : "Error"
    }
  },
  "description" : "Configuration for retrying a template node.\nThe node execution will be retried `maxRetries` times.\nThe delay between retries will be exponentially increased starting from `minBackoff` to `maxBackoff`.\nIf the node execution fails after `maxRetries` retries, the node state will be set to `errorState` if it that property is provided.\nOtherwise node execution will fail. Error state should be one of the possible states defined by the sensor node."
}
""",
    object_hook=with_example_provider,
)
retry_config_model_schema.update({"definitions": MODEL_DEFINITIONS})

retry_config_faker = JSF(retry_config_model_schema, allow_none_optionals=1)


class RetryConfigStub:
    """RetryConfig unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return retry_config_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "RetryConfig":
        """Create RetryConfig stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(RetryConfigAdapter.json_schema(), allow_none_optionals=1)
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return RetryConfigAdapter.validate_python(
            json, context={"skip_validation": True}
        )
