# coding: utf-8
"""Waylay rules engine model tests.

This code was generated from the OpenAPI documentation of 'Waylay rules engine'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.rules.models.task_with_rule import TaskWithRule

    TaskWithRuleAdapter = TypeAdapter(TaskWithRule)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

task_with_rule_model_schema = json.loads(
    r"""{
  "type" : "object",
  "example" : {
    "task" : {
      "name" : "myTask",
      "type" : "reactive"
    },
    "sensors" : [ ],
    "relations" : [ ],
    "triggers" : [ ]
  },
  "allOf" : [ {
    "$ref" : "#/components/schemas/SimplifiedGraph"
  }, {
    "required" : [ "task" ],
    "properties" : {
      "notes" : {
        "title" : "List of notes as explanation for users",
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/NoteElement"
        }
      },
      "task" : {
        "$ref" : "#/components/schemas/TaskWithRule_allOf_task"
      }
    }
  } ]
}
""",
    object_hook=with_example_provider,
)
task_with_rule_model_schema.update({"definitions": MODEL_DEFINITIONS})

task_with_rule_faker = JSF(task_with_rule_model_schema, allow_none_optionals=1)


class TaskWithRuleStub:
    """TaskWithRule unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return task_with_rule_faker.generate()

    @classmethod
    def create_instance(cls) -> "TaskWithRule":
        """Create TaskWithRule stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        return TaskWithRuleAdapter.validate_python(cls.create_json())
